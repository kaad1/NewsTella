@using NewsTella.Models
@using NewsTella.Services
@inject IArticlesService articleService
@inject ICategoryService categoryService

@{
	var latestArticle = articleService.GetLatestArticle();
}


<div class="container container-rm-margin container-rework">
	<div class="breaking-news-wrapper breaking-news-headline">
		<div class="breaking-news-inner">
			<div class="breaking-news-title">Breaking News</div>
			<div class="breaking-news-display" id="breaking-news">

			</div>
			<div class="breaking-news-button-wrap">
				<a class="breaking-news-prev" id="prev-breaking-news">
					<i class="bi bi-chevron-left"></i>
				</a> 
				<a class="breaking-news-next" id="next-breaking-news">
					<i class="bi bi-chevron-right"></i>
				</a> 
			</div>
		</div>
	</div>
</div>

<div class="container container-rm-margin container-rework">
	<div class="row row-margin">
		@if (latestArticle != null)
		{
			<div class="col-sm-12 col-md-6 col-lg-7 col-margin">				
				<div class="d-flex flex-column">	
					<div class="front-img-container">
						@if (!string.IsNullOrEmpty(latestArticle.ImageLink))
						{
							<div class="front-img" style="background-image: url('@latestArticle.ImageLink');"></div>							
						}
					</div>
				<div class="article-section">
						@if (latestArticle.Categories.Any())
						{
							var category = latestArticle.Categories.First();
							<a class="category-link icon-link icon-link-hover" asp-controller="Categories" asp-action="Articles" asp-route-categoryId="@category.Id">@category.Name</a>							
						}
						<h3 class="article-heading" title="@latestArticle.Headline">
							<a asp-controller="Article" asp-action="Details" asp-route-id="@latestArticle.Id">@latestArticle.Headline</a>
						</h3>
						<div class="article-paragraph">@latestArticle.ContentSummary</div>
				</div>
				</div>
				
			</div>
		}
		else
		{
			<p>No latest published article found.</p>
		}
		
		<div class="col-sm-12 col-md-6 col-lg-5 tab-sm">
				<div class="tab-wrapper">

				
				<ul class="nav nav-pills mb-3" id="pills-tab" role="tablist">
					<li class="nav-item tab-item" role="presentation">
						<button class="nav-link active" id="pills-home-tab" data-bs-toggle="pill" data-bs-target="#pills-latest" type="button" role="tab" aria-controls="pills-latest" aria-selected="true">Latest</button>
					</li>
					<li class="nav-item tab-item" role="presentation">
						<button class="nav-link" id="pills-profile-tab" data-bs-toggle="pill" data-bs-target="#pills-editors" type="button" role="tab" aria-controls="pills-editors" aria-selected="false">Editor's Choice</button>
					</li>
					<li class="nav-item tab-item" role="presentation">
						<button class="nav-link" id="pills-contact-tab" data-bs-toggle="pill" data-bs-target="#pills-popular" type="button" role="tab" aria-controls="pills-popular" aria-selected="false">Most Popular</button>
					</li>
				</ul>
				<div class="tab-content" id="pills-tabContent">
					<div class="tab-pane fade show active" id="pills-latest" role="tabpanel" aria-labelledby="pills-latest-tab" tabindex="0">
						@await Component.InvokeAsync("LatestArticle", new { count = 6 })
					</div>
					<div class="tab-pane fade" id="pills-editors" role="tabpanel" aria-labelledby="pills-editors-tab" tabindex="0">
						@await Component.InvokeAsync("ECArticle", new { count = 6 })
					</div>
					<div class="tab-pane fade" id="pills-popular" role="tabpanel" aria-labelledby="pills-popular-tab" tabindex="0">
						@await Component.InvokeAsync("PopularArticle", new { count = 6 })
					</div> 
				</div>
			</div>
		</div>

		<div class="border-bottom border-black m-3 mt-5 mb-5 lineborder "></div>

	</div>

	<div class="row">

		@if (latestArticle != null)
		{
			<div class="col-sm-12 col-md-12 col-lg-12 col-margin">
				<div>
					@await Component.InvokeAsync("PopularHomePage", new { count = 15 })
				</div>
			</div>
		}
		else
		{
			<p>No Article Found.</p>
		}
	</div>

</div>	

@section Scripts {
	<script>
		document.addEventListener("DOMContentLoaded", function () {
			const breakingNewsContainer = document.getElementById('breaking-news');
			const prevButton = document.getElementById('prev-breaking-news');
			const nextButton = document.getElementById('next-breaking-news');
			let articles = [];
			let currentIndex = 0;
			let autoUpdateTimer;
			let inactivityTimer;

			function fetchBreakingNews() {
				fetch('/Home/GetBreakingNews')
					.then(response => response.json())
					.then(data => {
						articles = data;
						currentIndex = 0;
						displayArticle();
					})
					.catch(error => console.error('Error fetching breaking news:', error));
			}

			function displayArticle() {
				if (articles.length > 0) {
					const article = articles[currentIndex];
					const headlineDiv = document.createElement('div');
					headlineDiv.className = 'headline';
					headlineDiv.innerHTML = `
								<h2 class="breaking-news-headline">
									<a href="/Article/Details/${article.id}">${article.headline}</a>
								</h2>`;
					breakingNewsContainer.innerHTML = '';
					breakingNewsContainer.appendChild(headlineDiv);
				}
			}

			function showNextArticle() {
				currentIndex = (currentIndex + 1) % articles.length;
				displayArticle();
			}

			function showPrevArticle() {
				currentIndex = (currentIndex - 1) % articles.length;
				if (currentIndex < 0) {
					currentIndex += articles.length;
				}
				displayArticle();
			}

			function resetAutoUpdateTimer() {
				clearInterval(autoUpdateTimer);
				autoUpdateTimer = setInterval(function () {
					currentIndex = (currentIndex + 1) % articles.length;
					displayArticle();
				}, 500000);
			}

			function handleButtonClick() {
				clearInterval(autoUpdateTimer);
				clearTimeout(inactivityTimer);
				inactivityTimer = setTimeout(function () {
					currentIndex = (currentIndex + 1) % articles.length;
					displayArticle();
					resetAutoUpdateTimer();
				}, 500000);
			}

			prevButton.addEventListener('click', () => {
				showPrevArticle();
				handleButtonClick();
			});

			nextButton.addEventListener('click', () => {
				showNextArticle();
				handleButtonClick();
			});

			fetchBreakingNews();
			autoUpdateTimer = setInterval(showNextArticle, 500000);
			setInterval(fetchBreakingNews, 300000);
		});
	</script>
}


